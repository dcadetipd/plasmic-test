// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4PWWUGdEeWDFKNqeFuFdzP
// Component: ctnreak9fVqQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import HeaderTlf from "../../HeaderTlf"; // plasmic-import: rODFX2DMa7hT/component
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import FooterTlf from "../../FooterTlf"; // plasmic-import: foCChc10Jrov/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantswycoMwNnQBim } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wycoMWNnQBim/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4PWWUGdEeWDFKNqeFuFdzP/projectcss
import sty from "./PlasmicPageListArticle.module.css"; // plasmic-import: ctnreak9fVqQ/css

createPlasmicElementProxy;

export type PlasmicPageListArticle__VariantMembers = {};
export type PlasmicPageListArticle__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageListArticle__VariantsArgs;
export const PlasmicPageListArticle__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPageListArticle__ArgsType = {};
type ArgPropType = keyof PlasmicPageListArticle__ArgsType;
export const PlasmicPageListArticle__ArgProps = new Array<ArgPropType>();

export type PlasmicPageListArticle__OverridesType = {
  pageListeArticle?: Flex__<"div">;
  headerTlf?: Flex__<typeof HeaderTlf>;
  articles?: Flex__<"h1">;
  articleList?: Flex__<"div">;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  h4?: Flex__<"h4">;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  radio?: Flex__<typeof AntdRadio>;
  footerTlf?: Flex__<typeof FooterTlf>;
};

export interface DefaultPageListArticleProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageListArticle__RenderFunc(props: {
  variants: PlasmicPageListArticle__VariantsArgs;
  args: PlasmicPageListArticle__ArgsType;
  overrides: PlasmicPageListArticle__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    queryArticles: usePlasmicDataOp(() => {
      return {
        sourceId: "gHZEuCcJWtgYMHmdhTMHRN",
        opId: "e7860bf4-ba88-49d8-8d24-bddd5993b7ab",
        userArgs: {
          variables: [parseInt($ctx.params.page), 5]
        },
        cacheKey: `plasmic.$.e7860bf4-ba88-49d8-8d24-bddd5993b7ab.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswycoMwNnQBim()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPageListArticle.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPageListArticle.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPageListArticle.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"pageListeArticle"}
          data-plasmic-override={overrides.pageListeArticle}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.pageListeArticle
          )}
        >
          <HeaderTlf
            data-plasmic-name={"headerTlf"}
            data-plasmic-override={overrides.headerTlf}
            className={classNames("__wab_instance", sty.headerTlf)}
          />

          <h1
            data-plasmic-name={"articles"}
            data-plasmic-override={overrides.articles}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.articles
            )}
          >
            {"Articles"}
          </h1>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.queryArticles.data.response.data.editos.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                data-plasmic-name={"articleList"}
                data-plasmic-override={overrides.articleList}
                className={classNames(projectcss.all, sty.articleList)}
                id={``}
                key={currentIndex}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return "/article/" + currentItem.slug;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
                title={``}
              >
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__s6Lkd)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"200px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"200px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"200px"}
                      height={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "200px"
                          : ``
                      }
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.cover.data.url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      width={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "200px"
                          : ``
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__lkhJp)}
                  >
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h4>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ikka0
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.dates.publishedAt;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Cxf
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.intro_listing;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
          <AntdRadioGroup
            data-plasmic-name={"radioGroup"}
            data-plasmic-override={overrides.radioGroup}
            className={classNames("__wab_instance", sty.radioGroup)}
            onChange={generateStateOnChangeProp($state, [
              "radioGroup",
              "value"
            ])}
            optionType={"button"}
            options={[]}
            value={generateStateValueProp($state, ["radioGroup", "value"])}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    let first = 1;
                    let last =
                      $queries.queryArticles.data.response.data.editos
                        .pagination.pageCount;
                    let current =
                      $queries.queryArticles.data.response.data.editos
                        .pagination.page;
                    let spread = 3;
                    return [
                      {
                        label: "<<",
                        page: first,
                        url: "/articles/"
                      },
                      {
                        label: "<",
                        page: current - 1,
                        url: "/articles/" + (current - 1)
                      },
                      ...Array.from({ length: last }, (_, i) =>
                        Object({
                          label: i,
                          page: i,
                          url: "/articles/" + i
                        })
                      ).slice(
                        Math.max(first + 1, current - spread),
                        Math.min(current + 1 + spread, last)
                      ),
                      {
                        label: ">",
                        page: current + 1,
                        url: "/articles/" + (current + 1)
                      },
                      {
                        label: ">>",
                        page: last,
                        url: "/articles/" + last
                      }
                    ];
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentPaginationItem = __plasmic_item_0;
              const currentPaginationIndex = __plasmic_idx_0;
              return (
                <AntdRadio
                  data-plasmic-name={"radio"}
                  data-plasmic-override={overrides.radio}
                  className={classNames("__wab_instance", sty.radio)}
                  disabled={(() => {
                    try {
                      return (
                        currentPaginationItem.page ==
                        $queries.queryArticles.data.response.data.editos
                          .pagination.page
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  key={currentPaginationIndex}
                  value={``}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1Q9W0
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return currentPaginationItem.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentPaginationItem.label;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Option 1";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </AntdRadio>
              );
            })}
          </AntdRadioGroup>
          <FooterTlf
            data-plasmic-name={"footerTlf"}
            data-plasmic-override={overrides.footerTlf}
            className={classNames("__wab_instance", sty.footerTlf)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pageListeArticle: [
    "pageListeArticle",
    "headerTlf",
    "articles",
    "articleList",
    "columns",
    "img",
    "h4",
    "radioGroup",
    "radio",
    "footerTlf"
  ],
  headerTlf: ["headerTlf"],
  articles: ["articles"],
  articleList: ["articleList", "columns", "img", "h4"],
  columns: ["columns", "img", "h4"],
  img: ["img"],
  h4: ["h4"],
  radioGroup: ["radioGroup", "radio"],
  radio: ["radio"],
  footerTlf: ["footerTlf"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pageListeArticle: "div";
  headerTlf: typeof HeaderTlf;
  articles: "h1";
  articleList: "div";
  columns: "div";
  img: typeof PlasmicImg__;
  h4: "h4";
  radioGroup: typeof AntdRadioGroup;
  radio: typeof AntdRadio;
  footerTlf: typeof FooterTlf;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageListArticle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageListArticle__VariantsArgs;
    args?: PlasmicPageListArticle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageListArticle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPageListArticle__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageListArticle__ArgProps,
          internalVariantPropNames: PlasmicPageListArticle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageListArticle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pageListeArticle") {
    func.displayName = "PlasmicPageListArticle";
  } else {
    func.displayName = `PlasmicPageListArticle.${nodeName}`;
  }
  return func;
}

export const PlasmicPageListArticle = Object.assign(
  // Top-level PlasmicPageListArticle renders the root element
  makeNodeComponent("pageListeArticle"),
  {
    // Helper components rendering sub-elements
    headerTlf: makeNodeComponent("headerTlf"),
    articles: makeNodeComponent("articles"),
    articleList: makeNodeComponent("articleList"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    h4: makeNodeComponent("h4"),
    radioGroup: makeNodeComponent("radioGroup"),
    radio: makeNodeComponent("radio"),
    footerTlf: makeNodeComponent("footerTlf"),

    // Metadata about props expected for PlasmicPageListArticle
    internalVariantProps: PlasmicPageListArticle__VariantProps,
    internalArgProps: PlasmicPageListArticle__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Liste des articles",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPageListArticle;
/* prettier-ignore-end */
