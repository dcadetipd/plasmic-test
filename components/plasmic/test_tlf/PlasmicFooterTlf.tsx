// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4PWWUGdEeWDFKNqeFuFdzP
// Component: foCChc10Jrov

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantswycoMwNnQBim } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wycoMWNnQBim/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4PWWUGdEeWDFKNqeFuFdzP/projectcss
import sty from "./PlasmicFooterTlf.module.css"; // plasmic-import: foCChc10Jrov/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: V7eW-M4LpFKU/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 48aLC2YzjXpQ/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: GmvjUiqKFTiu/icon

createPlasmicElementProxy;

export type PlasmicFooterTlf__VariantMembers = {};
export type PlasmicFooterTlf__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterTlf__VariantsArgs;
export const PlasmicFooterTlf__VariantProps = new Array<VariantPropType>();

export type PlasmicFooterTlf__ArgsType = {};
type ArgPropType = keyof PlasmicFooterTlf__ArgsType;
export const PlasmicFooterTlf__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterTlf__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
};

export interface DefaultFooterTlfProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooterTlf__RenderFunc(props: {
  variants: PlasmicFooterTlf__VariantsArgs;
  args: PlasmicFooterTlf__ArgsType;
  overrides: PlasmicFooterTlf__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswycoMwNnQBim()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__qk5O7)}>
        <Stack__
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__nzcnl)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zex2R)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__u7H8Z)}
                displayHeight={"40px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"40px"}
                src={"https://web.integration.pointfranchise.co.uk/logo.svg"}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mv3Cg)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rn9ZC
                  )}
                >
                  {"Connect with us"}
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fPtkk)}
                >
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg___6Cfu0)}
                    role={"img"}
                  />

                  <Icon3Icon
                    className={classNames(projectcss.all, sty.svg__sRj8B)}
                    role={"img"}
                  />

                  <Icon4Icon
                    className={classNames(projectcss.all, sty.svg__bnpb2)}
                    role={"img"}
                  />
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column__upSck)} />

          <div className={classNames(projectcss.all, sty.column__yqePm)} />

          <div className={classNames(projectcss.all, sty.column__y11Zb)} />
        </Stack__>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__y7NOe)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7Xr
          )}
        >
          {"A brand of the group"}
        </div>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__rD8BZ)}
          displayHeight={"20px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={
            "https://web.integration.pointfranchise.co.uk/_nuxt/logo-ipd-white.DjReksPM.png"
          }
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterTlf__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterTlf__VariantsArgs;
    args?: PlasmicFooterTlf__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterTlf__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooterTlf__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooterTlf__ArgProps,
          internalVariantPropNames: PlasmicFooterTlf__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooterTlf__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterTlf";
  } else {
    func.displayName = `PlasmicFooterTlf.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterTlf = Object.assign(
  // Top-level PlasmicFooterTlf renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicFooterTlf
    internalVariantProps: PlasmicFooterTlf__VariantProps,
    internalArgProps: PlasmicFooterTlf__ArgProps
  }
);

export default PlasmicFooterTlf;
/* prettier-ignore-end */
