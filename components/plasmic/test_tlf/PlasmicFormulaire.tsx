// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4PWWUGdEeWDFKNqeFuFdzP
// Component: eKRmtrDhrNPy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { GraphqlFetcher } from "@plasmicpkgs/plasmic-query";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdSteps } from "@plasmicpkgs/antd5/skinny/registerSteps";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4PWWUGdEeWDFKNqeFuFdzP/projectcss
import sty from "./PlasmicFormulaire.module.css"; // plasmic-import: eKRmtrDhrNPy/css

createPlasmicElementProxy;

export type PlasmicFormulaire__VariantMembers = {};
export type PlasmicFormulaire__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormulaire__VariantsArgs;
export const PlasmicFormulaire__VariantProps = new Array<VariantPropType>();

export type PlasmicFormulaire__ArgsType = {};
type ArgPropType = keyof PlasmicFormulaire__ArgsType;
export const PlasmicFormulaire__ArgProps = new Array<ArgPropType>();

export type PlasmicFormulaire__OverridesType = {
  formulaire?: Flex__<"div">;
  graphQlFetcher?: Flex__<typeof GraphqlFetcher>;
  h4?: Flex__<"h4">;
  freeBox?: Flex__<"div">;
  section?: Flex__<"section">;
  h5?: Flex__<"h5">;
  form?: Flex__<typeof FormWrapper>;
  button?: Flex__<typeof AntdButton>;
  text?: Flex__<"div">;
  steps?: Flex__<typeof AntdSteps>;
};

export interface DefaultFormulaireProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormulaire__RenderFunc(props: {
  variants: PlasmicFormulaire__VariantsArgs;
  args: PlasmicFormulaire__ArgsType;
  overrides: PlasmicFormulaire__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form[].value",
        type: "private",
        variableType: "object",

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form[].isSubmitting",
        type: "private",
        variableType: "boolean",

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "steps.current",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.step;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 1;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"formulaire"}
          data-plasmic-override={overrides.formulaire}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.formulaire
          )}
        >
          <GraphqlFetcher
            data-plasmic-name={"graphQlFetcher"}
            data-plasmic-override={overrides.graphQlFetcher}
            className={classNames("__wab_instance", sty.graphQlFetcher)}
            dataName={"fetchedData"}
            errorDisplay={
              <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={
              <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
            }
            method={"POST"}
            noLayout={false}
            query={{
              query:
                "query Query($filters: FormFilters) {\n  form(filters: $filters) {\n    steps\n    title\n    description\n    requestType\n    reference\n  }\n}\n",
              variables: { filters: { formSlug: "documentation-request" } }
            }}
            url={"https://graphql.integration.pointfranchise.co.uk/"}
            varOverrides={{}}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <h4
                    data-plasmic-name={"h4"}
                    data-plasmic-override={overrides.h4}
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchedData.data.form.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h4>
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__jYgYg
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $ctx.fetchedData.data.form.description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </p>
                  {(() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.fetchedData.data.form.steps;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            data-plasmic-name={"freeBox"}
                            data-plasmic-override={overrides.freeBox}
                            className={classNames(projectcss.all, sty.freeBox)}
                            key={currentIndex}
                          >
                            {(() => {
                              try {
                                return (
                                  currentItem.id == "step" + ($state.step + 1)
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <section
                                data-plasmic-name={"section"}
                                data-plasmic-override={overrides.section}
                                className={classNames(
                                  projectcss.all,
                                  sty.section
                                )}
                              >
                                <h5
                                  data-plasmic-name={"h5"}
                                  data-plasmic-override={overrides.h5}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h5,
                                    projectcss.__wab_text,
                                    sty.h5
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h5>
                                <p
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.p,
                                    projectcss.__wab_text,
                                    sty.p__cmSy
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.subtitle;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </p>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.form
                                    ),
                                    extendedOnValuesChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["form", __plasmic_idx_0, "value"],
                                        FormWrapper_Helpers
                                      ),
                                    formItems: undefined,
                                    labelCol: { span: 8, horizontalOnly: true },
                                    layout: "vertical",
                                    mode: undefined,
                                    onFinish: async values => {
                                      const $steps = {};

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return (() => {
                                                  if (
                                                    $state.step <
                                                    $ctx.fetchedData.data.form
                                                      .steps.length -
                                                      1
                                                  ) {
                                                    return $state.step++;
                                                  }
                                                })();
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }
                                    },
                                    onIsSubmittingChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "isSubmitting",
                                        [
                                          "form",
                                          __plasmic_idx_0,
                                          "isSubmitting"
                                        ],
                                        FormWrapper_Helpers
                                      ),
                                    ref: ref => {
                                      $refs["form"] = ref;
                                    },
                                    wrapperCol: {
                                      span: 16,
                                      horizontalOnly: true
                                    }
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "form[].value"
                                      },
                                      {
                                        name: "isSubmitting",
                                        plasmicStateName: "form[].isSubmitting"
                                      }
                                    ],
                                    [__plasmic_idx_0],
                                    FormWrapper_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <FormWrapper
                                      data-plasmic-name={"form"}
                                      data-plasmic-override={overrides.form}
                                      {...child$Props}
                                    >
                                      <AntdButton
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button
                                        )}
                                        submitsForm={true}
                                        type={"primary"}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $state.step <
                                                  $ctx.fetchedData.data.form
                                                    .steps.length -
                                                    1
                                                  ? "Suivant"
                                                  : "Envoyer";
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Submit";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </AntdButton>
                                    </FormWrapper>
                                  );
                                })()}
                              </section>
                            ) : null}
                          </div>
                        );
                      })
                    : null}
                  <AntdSteps
                    data-plasmic-name={"steps"}
                    data-plasmic-override={overrides.steps}
                    className={classNames("__wab_instance", sty.steps)}
                    current={generateStateValueProp($state, [
                      "steps",
                      "current"
                    ])}
                    direction={"horizontal"}
                    items={(() => {
                      try {
                        return $ctx.fetchedData.data.form.steps;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onChange={generateStateOnChangeProp($state, [
                      "steps",
                      "current"
                    ])}
                    progressDot={true}
                    size={"small"}
                    type={"default"}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          </GraphqlFetcher>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  formulaire: [
    "formulaire",
    "graphQlFetcher",
    "h4",
    "freeBox",
    "section",
    "h5",
    "form",
    "button",
    "text",
    "steps"
  ],
  graphQlFetcher: [
    "graphQlFetcher",
    "h4",
    "freeBox",
    "section",
    "h5",
    "form",
    "button",
    "text",
    "steps"
  ],
  h4: ["h4"],
  freeBox: ["freeBox", "section", "h5", "form", "button", "text"],
  section: ["section", "h5", "form", "button", "text"],
  h5: ["h5"],
  form: ["form", "button", "text"],
  button: ["button", "text"],
  text: ["text"],
  steps: ["steps"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  formulaire: "div";
  graphQlFetcher: typeof GraphqlFetcher;
  h4: "h4";
  freeBox: "div";
  section: "section";
  h5: "h5";
  form: typeof FormWrapper;
  button: typeof AntdButton;
  text: "div";
  steps: typeof AntdSteps;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormulaire__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormulaire__VariantsArgs;
    args?: PlasmicFormulaire__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormulaire__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFormulaire__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormulaire__ArgProps,
          internalVariantPropNames: PlasmicFormulaire__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormulaire__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "formulaire") {
    func.displayName = "PlasmicFormulaire";
  } else {
    func.displayName = `PlasmicFormulaire.${nodeName}`;
  }
  return func;
}

export const PlasmicFormulaire = Object.assign(
  // Top-level PlasmicFormulaire renders the root element
  makeNodeComponent("formulaire"),
  {
    // Helper components rendering sub-elements
    graphQlFetcher: makeNodeComponent("graphQlFetcher"),
    h4: makeNodeComponent("h4"),
    freeBox: makeNodeComponent("freeBox"),
    section: makeNodeComponent("section"),
    h5: makeNodeComponent("h5"),
    form: makeNodeComponent("form"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    steps: makeNodeComponent("steps"),

    // Metadata about props expected for PlasmicFormulaire
    internalVariantProps: PlasmicFormulaire__VariantProps,
    internalArgProps: PlasmicFormulaire__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFormulaire;
/* prettier-ignore-end */
