// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4PWWUGdEeWDFKNqeFuFdzP
// Component: sX-CB0Z_zBZr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import HeaderTlf from "../../HeaderTlf"; // plasmic-import: rODFX2DMa7hT/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import FooterTlf from "../../FooterTlf"; // plasmic-import: foCChc10Jrov/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4PWWUGdEeWDFKNqeFuFdzP/projectcss
import sty from "./PlasmicArticle.module.css"; // plasmic-import: sX-CB0Z_zBZr/css

createPlasmicElementProxy;

export type PlasmicArticle__VariantMembers = {};
export type PlasmicArticle__VariantsArgs = {};
type VariantPropType = keyof PlasmicArticle__VariantsArgs;
export const PlasmicArticle__VariantProps = new Array<VariantPropType>();

export type PlasmicArticle__ArgsType = {};
type ArgPropType = keyof PlasmicArticle__ArgsType;
export const PlasmicArticle__ArgProps = new Array<ArgPropType>();

export type PlasmicArticle__OverridesType = {
  root?: Flex__<"div">;
  headerTlf?: Flex__<typeof HeaderTlf>;
  h2?: Flex__<"h2">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  img?: Flex__<typeof PlasmicImg__>;
  footerTlf?: Flex__<typeof FooterTlf>;
};

export interface DefaultArticleProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicArticle__RenderFunc(props: {
  variants: PlasmicArticle__VariantsArgs;
  args: PlasmicArticle__ArgsType;
  overrides: PlasmicArticle__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel[].currentSlide",
        type: "private",
        variableType: "number",

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "gHZEuCcJWtgYMHmdhTMHRN",
        opId: "f664eb91-f819-4135-b6e2-185d6a00d6ea",
        userArgs: {
          variables: [$ctx.params.slug]
        },
        cacheKey: `plasmic.$.f664eb91-f819-4135-b6e2-185d6a00d6ea.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <HeaderTlf
            data-plasmic-name={"headerTlf"}
            data-plasmic-override={overrides.headerTlf}
            className={classNames("__wab_instance", sty.headerTlf)}
          />

          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.query.data.response.data.edito.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h2>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ntaTu
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.query.data.response.data.edito.section;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__vNvna)}
                key={currentIndex}
              >
                {(() => {
                  try {
                    return currentItem.type === "text";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oVmk
                    )}
                    hidden={undefined}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (() => {
                              function markdown(src) {
                                var rx_lt = /</g;
                                var rx_gt = />/g;
                                var rx_space = /\t|\r|\uf8ff/g;
                                var rx_escape = /\\([\\\|`*_{}\[\]()#+\-~])/g;
                                var rx_hr = /^([*\-=_] *){3,}$/gm;
                                var rx_blockquote =
                                  /\n *&gt; *([^]*?)(?=(\n|$){2})/g;
                                var rx_list =
                                  /\n( *)(?:[*\-+]|((\d+)|([a-z])|[A-Z])[.)]) +([^]*?)(?=(\n|$){2})/g;
                                var rx_listjoin = /<\/(ol|ul)>\n\n<\1>/g;
                                var rx_highlight =
                                  /(^|[^A-Za-z\d\\])(([*_])|(~)|(\^)|(--)|(\+\+)|`)(\2?)([^<]*?)\2\8(?!\2)(?=\W|_|$)/g;
                                var rx_code =
                                  /\n((```|~~~).*\n?([^]*?)\n?\2|((    .*?\n)+))/g;
                                var rx_link =
                                  /((!?)\[(.*?)\]\((.*?)( ".*")?\)|\\([\\`*_{}\[\]()#+\-.!~]))/g;
                                var rx_table = /\n(( *\|.*?\| *\n)+)/g;
                                var rx_thead =
                                  /^.*\n( *\|( *\:?-+\:?-+\:? *\|)* *\n|)/;
                                var rx_row = /.*\n/g;
                                var rx_cell = /\||(.*?[^\\])\|/g;
                                var rx_heading =
                                  /(?=^|>|\n)([>\s]*?)(#{1,6}) (.*?)( #*)? *(?=\n|$)/g;
                                var rx_para =
                                  /(?=^|>|\n)\s*\n+([^<]+?)\n+\s*(?=\n|<|$)/g;
                                var rx_stash = /-\d+\uf8ff/g;
                                function replace(rex, fn) {
                                  src = src.replace(rex, fn);
                                }
                                function element(tag, content) {
                                  return (
                                    "<" + tag + ">" + content + "</" + tag + ">"
                                  );
                                }
                                function blockquote(src) {
                                  return src.replace(
                                    rx_blockquote,
                                    function (all, content) {
                                      return element(
                                        "blockquote",
                                        blockquote(
                                          highlight(
                                            content.replace(/^ *&gt; */gm, "")
                                          )
                                        )
                                      );
                                    }
                                  );
                                }
                                function list(src) {
                                  return src.replace(
                                    rx_list,
                                    function (all, ind, ol, num, low, content) {
                                      var entry = element(
                                        "li",
                                        highlight(
                                          content
                                            .split(
                                              RegExp(
                                                "\n ?" +
                                                  ind +
                                                  "(?:(?:\\d+|[a-zA-Z])[.)]|[*\\-+]) +",
                                                "g"
                                              )
                                            )
                                            .map(list)
                                            .join("</li><li>")
                                        )
                                      );
                                      return (
                                        "\n" +
                                        (ol
                                          ? '<ol start="' +
                                            (num
                                              ? ol + '">'
                                              : parseInt(ol, 36) -
                                                9 +
                                                '" style="list-style-type:' +
                                                (low ? "low" : "upp") +
                                                'er-alpha">') +
                                            entry +
                                            "</ol>"
                                          : element("ul", entry))
                                      );
                                    }
                                  );
                                }
                                function highlight(src) {
                                  return src.replace(
                                    rx_highlight,
                                    function (
                                      all,
                                      _,
                                      p1,
                                      emp,
                                      sub,
                                      sup,
                                      small,
                                      big,
                                      p2,
                                      content
                                    ) {
                                      return (
                                        _ +
                                        element(
                                          emp
                                            ? p2
                                              ? "strong"
                                              : "em"
                                            : sub
                                            ? p2
                                              ? "s"
                                              : "sub"
                                            : sup
                                            ? "sup"
                                            : small
                                            ? "small"
                                            : big
                                            ? "big"
                                            : "code",
                                          highlight(content)
                                        )
                                      );
                                    }
                                  );
                                }
                                function unesc(str) {
                                  return str.replace(rx_escape, "$1");
                                }
                                var stash = [];
                                var si = 0;
                                src = "\n" + src + "\n";
                                replace(rx_lt, "&lt;");
                                replace(rx_gt, "&gt;");
                                replace(rx_space, "  ");
                                src = blockquote(src);
                                replace(rx_hr, "<hr/>");
                                src = list(src);
                                replace(rx_listjoin, "");
                                replace(
                                  rx_code,
                                  function (all, p1, p2, p3, p4) {
                                    stash[--si] = element(
                                      "pre",
                                      element(
                                        "code",
                                        p3 || p4.replace(/^    /gm, "")
                                      )
                                    );
                                    return si + "\uF8FF";
                                  }
                                );
                                replace(
                                  rx_link,
                                  function (all, p1, p2, p3, p4, p5, p6) {
                                    stash[--si] = p4
                                      ? p2
                                        ? '<img src="' +
                                          p4 +
                                          '" alt="' +
                                          p3 +
                                          '"/>'
                                        : '<a href="' +
                                          p4 +
                                          '">' +
                                          unesc(highlight(p3)) +
                                          "</a>"
                                      : p6;
                                    return si + "\uF8FF";
                                  }
                                );
                                replace(rx_table, function (all, table) {
                                  var sep = table.match(rx_thead)[1];
                                  return (
                                    "\n" +
                                    element(
                                      "table",
                                      table.replace(rx_row, function (row, ri) {
                                        return row == sep
                                          ? ""
                                          : element(
                                              "tr",
                                              row.replace(
                                                rx_cell,
                                                function (all, cell, ci) {
                                                  return ci
                                                    ? element(
                                                        sep && !ri
                                                          ? "th"
                                                          : "td",
                                                        unesc(
                                                          highlight(cell || "")
                                                        )
                                                      )
                                                    : "";
                                                }
                                              )
                                            );
                                      })
                                    )
                                  );
                                });
                                replace(rx_heading, function (all, _, p1, p2) {
                                  return (
                                    _ +
                                    element(
                                      "h" + p1.length,
                                      unesc(highlight(p2))
                                    )
                                  );
                                });
                                replace(rx_para, function (all, content) {
                                  return element(
                                    "p",
                                    unesc(highlight(content))
                                  );
                                });
                                replace(rx_stash, function (all) {
                                  return stash[parseInt(all)];
                                });
                                return src.trim();
                              }
                              return markdown(currentItem.content);
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                ) : null}
                {(() => {
                  try {
                    return currentItem.type == "slideshow";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (() => {
                      const child$Props = {
                        beforeChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "currentSlide",
                            ["sliderCarousel", __plasmic_idx_0, "currentSlide"],
                            SliderWrapper_Helpers
                          ),
                        className: classNames(
                          "__wab_instance",
                          sty.sliderCarousel
                        ),
                        initialSlide: generateStateValueProp($state, [
                          "sliderCarousel",
                          __plasmic_idx_0,
                          "currentSlide"
                        ]),
                        ref: ref => {
                          $refs["sliderCarousel"] = ref;
                        },
                        sliderScopeClassName: sty["sliderCarousel__slider"]
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "currentSlide",
                            plasmicStateName: "sliderCarousel[].currentSlide"
                          }
                        ],
                        [__plasmic_idx_0],
                        SliderWrapper_Helpers ?? {},
                        child$Props
                      );
                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "sliderCarousel[].currentSlide",
                            initFunc: ({ $props, $state, $queries }) => 0
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <SliderWrapper
                          data-plasmic-name={"sliderCarousel"}
                          data-plasmic-override={overrides.sliderCarousel}
                          {...child$Props}
                        >
                          {(() => {
                            try {
                              return true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return currentItem.content;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__n2ENc
                                    )}
                                    key={currentIndex}
                                  >
                                    <PlasmicImg__
                                      data-plasmic-name={"img"}
                                      data-plasmic-override={overrides.img}
                                      alt={""}
                                      className={classNames(sty.img)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      src={(() => {
                                        try {
                                          return currentItem.url;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "https://static1.plasmic.app/components/react-slick/slide1.png";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />
                                  </div>
                                );
                              })
                            : null}
                        </SliderWrapper>
                      );
                    })()
                  : null}
              </div>
            );
          })}
          <FooterTlf
            data-plasmic-name={"footerTlf"}
            data-plasmic-override={overrides.footerTlf}
            className={classNames("__wab_instance", sty.footerTlf)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headerTlf", "h2", "sliderCarousel", "img", "footerTlf"],
  headerTlf: ["headerTlf"],
  h2: ["h2"],
  sliderCarousel: ["sliderCarousel", "img"],
  img: ["img"],
  footerTlf: ["footerTlf"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerTlf: typeof HeaderTlf;
  h2: "h2";
  sliderCarousel: typeof SliderWrapper;
  img: typeof PlasmicImg__;
  footerTlf: typeof FooterTlf;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicArticle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicArticle__VariantsArgs;
    args?: PlasmicArticle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicArticle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicArticle__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicArticle__ArgProps,
          internalVariantPropNames: PlasmicArticle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicArticle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicArticle";
  } else {
    func.displayName = `PlasmicArticle.${nodeName}`;
  }
  return func;
}

export const PlasmicArticle = Object.assign(
  // Top-level PlasmicArticle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerTlf: makeNodeComponent("headerTlf"),
    h2: makeNodeComponent("h2"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    img: makeNodeComponent("img"),
    footerTlf: makeNodeComponent("footerTlf"),

    // Metadata about props expected for PlasmicArticle
    internalVariantProps: PlasmicArticle__VariantProps,
    internalArgProps: PlasmicArticle__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicArticle;
/* prettier-ignore-end */
